---
title: "clean_to_processed_data_code"
format: html
---

## Researcher burnout and questionable research practice pilot data cleaning

### Clean to processed data

#Load libraries
```{r echo = FALSE ouput = FALSE}
library(tidyverse)
library(here)
data_path <- here("data")
```

#Load data
```{r echo = FALSE ouput = FALSE}
clean_data <- read_csv(here::here("data/raw_to_clean_data.csv"))
codebook = read_csv(here::here("data/codebook.csv"))
```

#Change responses from string to integer for Burnout Assessment Tool (BAT) questions
```{r}
burnout_columns = c("bat_1", "bat_2", "bat_3", "bat_4")
burnout_data = clean_data |> 
  select(bat_1, bat_2, bat_3, bat_4, anonym_id)

for (column in burnout_columns) {
  burnout_data[[column]] = case_when(
    clean_data[[column]] == "Never" ~ 1,
    clean_data[[column]] == "Rarely" ~ 2,
    clean_data[[column]] == "Sometimes" ~ 3,
    clean_data[[column]] == "Often" ~ 4,
    clean_data[[column]] == "Always" ~ 5
  )
}

#No reverse coded items
```

#Change responses from string to integer for Publication Pressure Questionnaire Revised (PPQR) questions
```{r}
ppqr_data = clean_data |> 
  select(contains("ppqr"), anonym_id)

ppqr_columns = ppqr_data |> 
  select(contains("ppqr")) |> 
  colnames()


for (column in ppqr_columns) {
  ppqr_data[[column]] = case_when(
    clean_data[[column]] == "Strongly disagree" ~ 1,
    clean_data[[column]] == "Disagree" ~ 2,
    clean_data[[column]] == "Neither agree nor disagree" ~ 3,
    clean_data[[column]] == "Agree" ~ 4,
    clean_data[[column]] == "Strongly agree" ~ 5
  )
}

ppqr_stress_subscale = ppqr_data |> 
  select(ppqr_1:ppqr_6, anonym_id) |> 
  rename_with(~str_replace(., "ppqr", "ppqr_stress"))

ppqr_attitude_subscale = ppqr_data |> 
  select(ppqr_7:ppqr_12, anonym_id) |> 
  rename_with(~str_replace(., "ppqr", "ppqr_attitude"))

ppqr_resources_subscale = ppqr_data |> 
  select(ppqr_13:ppqr_18, anonym_id) |> 
  rename_with(~str_replace(., "ppqr", "ppqr_resources"))

#No reverse coded items
```

#Change responses from string to integer for Job Insecurity Scale (JIS) questions
```{r}
jis_data = clean_data |> 
  select(contains("jis"), anonym_id)

jis_columns = jis_data |> 
  select(contains("jis")) |> 
  colnames()


for (column in jis_columns) {
  jis_data[[column]] = case_when(
    clean_data[[column]] == "Strongly disagree" ~ 1,
    clean_data[[column]] == "Somewhat disagree" ~ 2,
    clean_data[[column]] == "Neither agree nor disagree" ~ 3,
    clean_data[[column]] == "Somewhat agree" ~ 4,
    clean_data[[column]] == "Strongly agree" ~ 5
  )
}

#Reverse coded items: jis_2
jis_data_reversed = jis_data |> 
  mutate(jis_2 = case_when(
    jis_2 == 1 ~ 5,
    jis_2 == 2 ~ 4,
    jis_2 == 3 ~ 3,
    jis_2 == 4 ~ 2,
    jis_2 == 5 ~ 1
  ))
```

#Change responses from string to integer for Work-life balance measure (WLBM) questions
```{r}
wlbm_data = clean_data |> 
  select(contains("wlbm"), anonym_id)

wlbm_columns = wlbm_data |> 
  select(contains("wlbm")) |> 
  colnames()

for (column in wlbm_columns) {
  wlbm_data[[column]] = case_when(
    clean_data[[column]] == "Strongly disagree" ~ 1,
    clean_data[[column]] == "Somewhat disagree" ~ 2,
    clean_data[[column]] == "Neither agree nor disagree" ~ 3,
    clean_data[[column]] == "Somewhat agree" ~ 4,
    clean_data[[column]] == "Strongly agree" ~ 5
  )
}

#Reverse coded item: wlbm_2

wlbm_data_reversed = wlbm_data |> 
  mutate(wlbm_2 = case_when(
    wlbm_2 == 1 ~ 5,
    wlbm_2 == 2 ~ 4,
    wlbm_2 == 3 ~ 3,
    wlbm_2 == 4 ~ 2,
    wlbm_2 == 5 ~ 1
  ))
```

#Change responses from string to integer for Copenhagen Psychosocial Questionnaire workload (COPSOQ-workload) questions
```{r}
workload_data = clean_data |> 
  select(contains("copsoq_workload"), anonym_id) |> 
  select(-copsoq_workload_5)

#Copsoq workload 5 is an attention check question

workload_columns = workload_data |> 
  select(contains("copsoq_workload")) |> 
  colnames()

for (column in workload_columns) {
  workload_data[[column]] = case_when(
    clean_data[[column]] == "Never" ~ 1,
    clean_data[[column]] == "Rarely" ~ 2,
    clean_data[[column]] == "Sometimes" ~ 3,
    clean_data[[column]] == "Often" ~ 4,
    clean_data[[column]] == "Always" ~ 5
  )
}

#Reverse coded item: copsoq_workload_4

workload_data_reversed = workload_data |> 
  mutate(copsoq_workload_4 = case_when(
    copsoq_workload_4 == 1 ~ 5,
    copsoq_workload_4 == 2 ~ 4,
    copsoq_workload_4 == 3 ~ 3,
    copsoq_workload_4 == 4 ~ 2,
    copsoq_workload_4 == 5 ~ 1
  ))
```

#Change responses from string to integer for Copenhagen Psychosocial Questionnaire Social Support (COPSOQ-social-support) questions
```{r}
soc_support_data = clean_data |> 
  select(contains("copsoq_soc_sup"), anonym_id)


soc_support_columns = soc_support_data |> 
  select(contains("copsoq_soc_sup")) |> 
  colnames()

for (column in soc_support_columns) {
  soc_support_data[[column]] = case_when(
    clean_data[[column]] == "Never" ~ 1,
    clean_data[[column]] == "Rarely" ~ 2,
    clean_data[[column]] == "Sometimes" ~ 3,
    clean_data[[column]] == "Often" ~ 4,
    clean_data[[column]] == "Always" ~ 5
  )
}

#No reverse coded items
```

#Change responses from string to integer for Copenhagen Psychosocial Questionnaire Opportunities (COPSOQ-opportunities) questions
```{r}
opportunities_data = clean_data |> 
  select(contains("copsoq_opp"), anonym_id)

opportunities_columns = opportunities_data |> 
  select(contains("copsoq_opp")) |> 
  colnames()

for (column in opportunities_columns) {
  opportunities_data[[column]] = case_when(
    clean_data[[column]] == "Never" ~ 1,
    clean_data[[column]] == "Rarely" ~ 2,
    clean_data[[column]] == "Sometimes" ~ 3,
    clean_data[[column]] == "Often" ~ 4,
    clean_data[[column]] == "Always" ~ 5
  )
}

#No reverse coded items
```

#Change responses from string to integer for Questionable Research Practice (QRP) questions
```{r}
qrp_data = clean_data |> 
  select(contains("qrp"), anonym_id)

qrp_columns = qrp_data |> 
  select(contains("qrp")) |> 
  colnames()

for (column in qrp_columns) {
  qrp_data[[column]] = case_when(
    clean_data[[column]] == "Completely unacceptable" ~ 1,
    clean_data[[column]] == "Somewhat unacceptable" ~ 2,
    clean_data[[column]] == "Neither acceptable or unacceptable" ~ 3,
    clean_data[[column]] == "Somewhat acceptable" ~ 4,
    clean_data[[column]] == "Completely acceptable" ~ 5
  )
}

#No reverse coded items
```

#Change responses from string to integer for Copenhagen Psychosocial Questionnaire Influence (COPSOQ-influence) questions
```{r}
influence_data = clean_data |> 
  select(contains("copsoq_inf"), anonym_id)

influence_columns = influence_data |> 
  select(contains("copsoq_inf")) |> 
  colnames()

for (column in influence_columns) {
  influence_data[[column]] = case_when(
    clean_data[[column]] == "Never" ~ 1,
    clean_data[[column]] == "Rarely" ~ 2,
    clean_data[[column]] == "Sometimes" ~ 3,
    clean_data[[column]] == "Often" ~ 4,
    clean_data[[column]] == "Always" ~ 5
  )
}

#No reverse coded items
```

#Change responses from string to integer for Copenhagen Psychosocial Questionnaire Meaning (COPSOQ-Meaning) questions
```{r}
meaning_data = clean_data |> 
  select(contains("copsoq_mean"), anonym_id)

meaning_columns = meaning_data |> 
  select(contains("copsoq_mean")) |> 
  colnames()

for (column in meaning_columns) {
  meaning_data[[column]] = case_when(
    clean_data[[column]] == "Never" ~ 1,
    clean_data[[column]] == "Rarely" ~ 2,
    clean_data[[column]] == "Sometimes" ~ 3,
    clean_data[[column]] == "Often" ~ 4,
    clean_data[[column]] == "Always" ~ 5
  )
}

#No reverse coded items
```

#Change responses from string to integer for Role ambiguity and Role Conflict Scale (Role Ambiguity) questions
```{r}
role_stressor_data = clean_data |> 
  select(contains("role"), anonym_id)

role_stressor_columns = role_stressor_data |> 
  select(contains("role")) |> 
  colnames()

for (column in role_stressor_columns) {
  role_stressor_data[[column]] = case_when(
    clean_data[[column]] == "Strongly disagree" ~ 1,
    clean_data[[column]] == "Disagree" ~ 2,
    clean_data[[column]] == "Slightly disagree" ~ 3,
    clean_data[[column]] == "Neither agree nor disagree" ~ 4,
    clean_data[[column]] == "Slightly agree" ~ 5,
    clean_data[[column]] == "Agree" ~ 6,
    clean_data[[column]] == "Strongly agree" ~ 7
  )
}

#Reverse coded items: 4, 5, 6, 10, 11, 12
reverse_ambiguity_columns = c("role_ambiguity_4", "role_ambiguity_5", "role_ambiguity_6", 
                              "role_ambiguity_10", "role_ambiguity_11", "role_ambiguity_12")

role_stressor_data_reversed = role_stressor_data

for (col in role_stressor_columns) {
  role_stressor_data_reversed[[col]] = case_when(
    role_stressor_data[[col]] == 1 ~ 7,
    role_stressor_data[[col]] == 2 ~ 6,
    role_stressor_data[[col]] == 3 ~ 5,
    role_stressor_data[[col]] == 4 ~ 4,
    role_stressor_data[[col]] == 5 ~ 3,
    role_stressor_data[[col]] == 6 ~ 2,
    role_stressor_data[[col]] == 7 ~ 1
  )
}

role_ambiguity_data_reversed = role_stressor_data_reversed |> 
  select(role_ambiguity_1:role_ambiguity_6, anonym_id) 

role_conflict_data_reversed = role_stressor_data_reversed |> 
  select(role_ambiguity_7:role_ambiguity_12, anonym_id) |> 
  rename_with(~str_replace(., "role_ambiguity", "role_conflict"))
```

#Change responses from string to integer for Pay Satisfaction questions
```{r}
pay_satisfaction_data = clean_data |> 
  select(contains("pay_satisfaction"), anonym_id)

pay_satisfaction_columns = pay_satisfaction_data |>
  select(contains("pay_satisfaction")) |>
  colnames()

for (column in pay_satisfaction_columns) {
  pay_satisfaction_data[[column]] = case_when(
    clean_data[[column]] == "Very dissatisfied" ~ 1,
    clean_data[[column]] == "Dissatisfied" ~ 2,
    clean_data[[column]] == "Slightly dissatisfied" ~ 3,
    clean_data[[column]] == "Neither satisfied nor dissatisfied" ~ 4,
    clean_data[[column]] == "Slightly satisfied" ~ 5,
    clean_data[[column]] == "Satisfied" ~ 6,
    clean_data[[column]] == "Very satisfied" ~ 7
  )
}

#No reverse coded items
```

#Change responses from string to integer for Tool Satisfaction questions
```{r}
tool_satisfaction_data = clean_data |> 
  select(contains("tool_satisfaction"), anonym_id)

tool_satisfaction_columns = tool_satisfaction_data |>
  select(contains("tool_satisfaction")) |>
  colnames()

for (column in tool_satisfaction_columns) {
  tool_satisfaction_data[[column]] = case_when(
    clean_data[[column]] == "Very dissatisfied" ~ 1,
    clean_data[[column]] == "Dissatisfied" ~ 2,
    clean_data[[column]] == "Slightly dissatisfied" ~ 3,
    clean_data[[column]] == "Neither satisfied nor dissatisfied" ~ 4,
    clean_data[[column]] == "Slightly satisfied" ~ 5,
    clean_data[[column]] == "Satisfied" ~ 6,
    clean_data[[column]] == "Very satisfied" ~ 7
  )
}

#No reverse coded items
```

#Change responses from string to integer for General Satisfaction questions
```{r}
general_satisfaction_data = clean_data |> 
  select(contains("general_satisfaction"), anonym_id)

general_satisfaction_columns = general_satisfaction_data |>
  select(contains("general_satisfaction")) |>
  colnames()

for (column in general_satisfaction_columns) {
  general_satisfaction_data[[column]] = case_when(
    clean_data[[column]] == "Very dissatisfied" ~ 1,
    clean_data[[column]] == "Dissatisfied" ~ 2,
    clean_data[[column]] == "Slightly dissatisfied" ~ 3,
    clean_data[[column]] == "Neither satisfied nor dissatisfied" ~ 4,
    clean_data[[column]] == "Slightly satisfied" ~ 5,
    clean_data[[column]] == "Satisfied" ~ 6,
    clean_data[[column]] == "Very satisfied" ~ 7
  )
}

#No reverse coded items
```

#Change responses from string to integer for Open Research Practice (ORP) questions
```{r}
orp_data = clean_data |> 
  select(open_time, anonym_id) |> 
  mutate(open_practice =case_when(
    open_time == "Agree" ~ 1,
    open_time == "Disagree" ~ 0
  )) |> 
  select(-open_time)

#No reverse coded items
```

#Creating script that checks for lazy responding
```{r}
before_reverse_coding = burnout_data |> 
  left_join(ppqr_data, by = "anonym_id") |>
  left_join(jis_data, by = "anonym_id") |>
  left_join(wlbm_data, by = "anonym_id") |>
  left_join(workload_data, by = "anonym_id") |>
  left_join(soc_support_data, by = "anonym_id") |>
  left_join(opportunities_data, by = "anonym_id") |>
  left_join(qrp_data, by = "anonym_id") |>
  left_join(influence_data, by = "anonym_id") |>
  left_join(meaning_data, by = "anonym_id") |>
  left_join(role_stressor_data, by = "anonym_id") |>
  left_join(pay_satisfaction_data, by = "anonym_id") |>
  left_join(tool_satisfaction_data, by = "anonym_id") |>
  left_join(general_satisfaction_data, by = "anonym_id") |>
  left_join(orp_data, by = "anonym_id")

lazy_responding <- before_reverse_coding |> 
  mutate(
    anonym_id = as.character(anonym_id),
    total_sum = rowSums(select(before_reverse_coding, where(is.numeric)), na.rm = TRUE),
    lazy_responding = apply(before_reverse_coding, 1, function(row) all(row==row[2], na.rm = TRUE)),
    anonym_id = as.integer(anonym_id)
  ) |> 
  relocate(any_of(c("anonym_id", "lazy_responding", "total_sum")), .before = bat_1)


```

#Join datasets with identifiers
```{r}
survey_data = burnout_data |> 
  left_join(ppqr_stress_subscale, by = "anonym_id") |> 
  left_join(ppqr_attitude_subscale, by = "anonym_id") |> 
  left_join(ppqr_resources_subscale, by = "anonym_id") |> 
  left_join(jis_data_reversed, by = "anonym_id") |> 
  left_join(wlbm_data_reversed, by = "anonym_id") |> 
  left_join(workload_data_reversed, by = "anonym_id") |> 
  left_join(soc_support_data, by = "anonym_id") |> 
  left_join(opportunities_data, by = "anonym_id") |> 
  left_join(qrp_data, by = "anonym_id") |> 
  left_join(influence_data, by = "anonym_id") |> 
  left_join(meaning_data, by = "anonym_id") |> 
  left_join(role_ambiguity_data_reversed, by = "anonym_id") |> 
  left_join(role_conflict_data_reversed, by = "anonym_id") |> 
  left_join(pay_satisfaction_data, by = "anonym_id") |> 
  left_join(tool_satisfaction_data, by = "anonym_id") |> 
  left_join(general_satisfaction_data, by = "anonym_id") |> 
  left_join(orp_data, by = "anonym_id") |> 
  relocate(anonym_id, .before = bat_1)
```

#Save descriptive data in another dataframe
```{r}
descriptive_data = clean_data |> 
  select(anonym_id, gender:phd_dissertation)
```

#Save conditional data
```{r}
conditional_data = clean_data |> 
  select(anonym_id, finished, research_yes_no, academic_yes_no, consent, attention) |> 
  left_join(select(lazy_responding, anonym_id, lazy_responding), by = "anonym_id")
```

#Join descriptive and survey data
```{r}
processed_data = survey_data |> 
  left_join(descriptive_data, by = "anonym_id") |> 
  left_join(conditional_data, by = "anonym_id")
```

#Save data
```{r}
write.csv(survey_data, here::here("data/survey_data.csv"), row.names = FALSE)
write.csv(descriptive_data, here::here("data/descriptive_data.csv"), row.names = FALSE)
write.csv(processed_data, here::here("data/processed_data.csv"), row.names = FALSE)
```

